#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–∫–Ω—É—Ç–æ–≥–æ –∫—Ä—É–≥–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
"""

import asyncio
import aiosqlite
import os

async def test_promo_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–∫–Ω—É—Ç–æ–≥–æ –∫—Ä—É–≥–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    db_path = "test_promo.db"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(db_path) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await db.execute("""
            create table if not exists users (
                id integer primary key autoincrement,
                username text,
                telegram_id integer,
                role text default 'user',
                created_at text default (datetime('now'))
            )
        """)
        
        await db.execute("""
            create table if not exists promocodes (
                id integer primary key autoincrement,
                code text unique not null,
                discount_percent integer not null,
                min_amount integer default 0,
                max_uses integer default 0,
                used_count integer default 0,
                is_active integer default 1,
                created_at timestamp default current_timestamp
            )
        """)
        
        await db.execute("""
            create table if not exists user_active_promocodes (
                id integer primary key autoincrement,
                user_id integer references users(id) on delete cascade,
                promo_code text not null,
                discount_percent integer not null,
                min_amount integer default 0,
                created_at text default (datetime('now'))
            )
        """)
        
        await db.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            "insert into users (username, telegram_id) values (?, ?)",
            ("test_user", 123456789)
        )
        user_id = (await db.execute("select last_insert_rowid()")).fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        await db.execute(
            "insert into promocodes (code, discount_percent, min_amount, max_uses) values (?, ?, ?, ?)",
            ("WELCOME", 10, 1000, 100)
        )
        
        await db.commit()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        print("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: WELCOME (10% —Å–∫–∏–¥–∫–∞, –º–∏–Ω. —Å—É–º–º–∞ 1000 RUB)")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        result = await db.execute(
            "select * from user_active_promocodes where user_id=?",
            (user_id,)
        )
        active_promo = result.fetchone()
        
        if active_promo is None:
            print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        else:
            print("‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await db.execute(
            "insert into user_active_promocodes (user_id, promo_code, discount_percent, min_amount) values (?, ?, ?, ?)",
            (user_id, "WELCOME", 10, 1000)
        )
        await db.commit()
        
        result = await db.execute(
            "select * from user_active_promocodes where user_id=?",
            (user_id,)
        )
        active_promo = result.fetchone()
        
        if active_promo:
            print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            print(f"   –ü—Ä–æ–º–æ–∫–æ–¥: {active_promo[2]}, –°–∫–∏–¥–∫–∞: {active_promo[3]}%")
        else:
            print("‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        result = await db.execute(
            "select * from user_active_promocodes where user_id=?",
            (user_id,)
        )
        active_promo = result.fetchone()
        
        if active_promo and active_promo[2] == "WELCOME":
            print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ")
        else:
            print("‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
        
        # –¢–µ—Å—Ç 4: –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        await db.execute(
            "delete from user_active_promocodes where user_id=?",
            (user_id,)
        )
        await db.commit()
        
        result = await db.execute(
            "select * from user_active_promocodes where user_id=?",
            (user_id,)
        )
        active_promo = result.fetchone()
        
        if active_promo is None:
            print("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print("1. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ user_active_promocodes")
        print("2. ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("3. ‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
        print("4. ‚úÖ –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        print("5. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'")
        print("6. ‚úÖ –ó–∞–º–∫–Ω—É—Ç—ã–π –∫—Ä—É–≥ —É—Å—Ç—Ä–∞–Ω–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_promo_fix())
