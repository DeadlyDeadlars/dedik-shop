from aiogram import Router, types, F
from aiogram.types import LinkPreviewOptions
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder


def build_main_menu() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üõí –ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    kb.button(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
    kb.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
    kb.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    kb.button(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=False)


def setup_handlers(router: Router, services):
    db = services["db"]
    tariffs = services["tariffs"]
    users = services["users"]
    orders = services["orders"]
    cryptobot = services["cryptobot"]
    rub_usdt_rate: float = services.get("rub_usdt_rate", 0)
    price_markup_percent: float = services.get("price_markup_percent", 0)
    admin_ids = services["admin_ids"]
    log_channel_id = services.get("log_channel_id")
    support_contact = services.get("support_contact") or "@your_admin"

    def apply_markup(price_rub: float) -> int:
        # Return integer RUB price with markup applied
        try:
            return int(round(price_rub * (1.0 + (price_markup_percent or 0) / 100.0)))
        except Exception:
            return int(round(price_rub))

    @router.message(F.text.startswith("/start"))
    async def start_cmd(msg: types.Message):
        await db.ensure_schema()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        ref_id = None
        if msg.text.startswith("/start ref"):
            try:
                ref_id = int(msg.text.split("ref")[1])
            except (IndexError, ValueError):
                pass
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if ref_id and ref_id != user["id"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            current_user = await db.fetchrow("select referrer_id from users where id=?", user["id"])
            if not current_user or not current_user["referrer_id"]:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await db.execute("update users set referrer_id=? where id=?", ref_id, user["id"])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                try:
                    ref_user = await db.fetchrow("select telegram_id from users where id=?", ref_id)
                    if ref_user:
                        await msg.bot.send_message(
                            ref_user["telegram_id"],
                            f"üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username or msg.from_user.id} "
                            f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n\n"
                            f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ –µ–≥–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
                            parse_mode="HTML"
                        )
                except Exception:
                    pass
        
        welcome_text = "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeadlyVDS</b> üöÄ\n\n"
        if ref_id:
            welcome_text += "üéÅ <b>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</b>\n\n"
        
        welcome_text += (
            "üî• <b>–ú–æ—â–Ω—ã–µ VPS —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º</b>\n"
            "üåç <b>–õ–æ–∫–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</b>\n"
            "‚ö° <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        
        await msg.answer(
            welcome_text,
            reply_markup=build_main_menu(),
            parse_mode="HTML",
        )

    @router.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    async def catalog(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_promo = await db.fetchrow(
            "select * from user_active_promocodes where user_id=?",
            user["id"]
        )
        
        locs = await tariffs.list_locations()
        kb = InlineKeyboardBuilder()
        if not locs:
            return await msg.answer(
                "üòî <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç</b>\n\n"
                "üìù <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /seed –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤</i>\n\n"
                "‚è≥ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                parse_mode="HTML"
            )
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        promo_info = ""
        if active_promo:
            promo_info = (
                f"\nüéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{active_promo['promo_code']}</code>\n"
                f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {active_promo['discount_percent']}%\n"
            )
            if active_promo['min_amount'] > 0:
                promo_info += f"üìä <b>–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {active_promo['min_amount']} RUB\n"
            promo_info += "\n"
        
        for loc in locs:
            low = loc.lower()
            flag = (
                "üá∑üá∫" if "—Ä–æ—Å" in low else
                ("üá∫üá∏" if ("—Å—à–∞" in low or "usa" in low) else
                 ("üá∏üá¨" if ("—Å–∏–Ω–≥–∞–ø" in low or "singap" in low) else
                  ("üá´üáÆ" if ("—Ñ–∏–Ω" in low or "finland" in low) else
                   ("üá©üá™" if ("–≥–µ—Ä" in low or "germ" in low) else
                    ("üá´üá∑" if ("—Ñ—Ä–∞–Ω—Ü" in low or "france" in low) else
                     ("üá≥üá±" if ("–Ω–∏–¥–µ—Ä" in low or "neder" in low or "nether" in low) else
                      ("üáßüá¨" if ("–±–æ–ª–≥–∞—Ä" in low or "bulgar" in low) else
                       ("üá™üá∏" if ("–∏—Å–ø–∞–Ω" in low or "spain" in low) else "üìç"))))))))
            )
            kb.button(text=f"{flag} {loc}", callback_data=f"loc:{loc}")
        kb.adjust(2)
        
        message_text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
        if active_promo:
            message_text += promo_info
        message_text += "üí° <i>–ö–∞–∂–¥–∞—è –ª–æ–∫–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</i>"
        
        await msg.answer(
            message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

    @router.callback_query(F.data.startswith("loc:"))
    async def list_tariffs(cb: types.CallbackQuery):
        loc = cb.data.split(":", 1)[1]
        ts = await tariffs.list_by_location(loc)
        if not ts:
            return await cb.message.edit_text(
                f"üòî <b>–¢–∞—Ä–∏—Ñ—ã –¥–ª—è {loc} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "üìù <i>–í–æ–∑–º–æ–∂–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏</i>\n\n"
                "üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                parse_mode="HTML"
            )
        kb = InlineKeyboardBuilder()
        for t in ts:
            price_marked = apply_markup(float(t['price']))
            label_full = f"{price_marked} RUB ‚Ä¢ {t['specs']}"
            label = (label_full[:60] + '‚Ä¶') if len(label_full) > 60 else label_full
            kb.button(text=label, callback_data=f"buy:{t['id']}")
        kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back:catalog")
        kb.adjust(1)
        await cb.message.edit_text(
            f"üñ•Ô∏è <b>–¢–∞—Ä–∏—Ñ—ã ‚Äî {loc}</b> üñ•Ô∏è\n\n"
            f"üíª <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞:</i>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )

    @router.callback_query(F.data == "back:catalog")
    async def back_catalog(cb: types.CallbackQuery):
        locs = await tariffs.list_locations()
        kb = InlineKeyboardBuilder()
        for loc in locs:
            kb.button(text=loc, callback_data=f"loc:{loc}")
        kb.adjust(1)
        await cb.message.edit_text(
            "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
            "üí° <i>–ö–∞–∂–¥–∞—è –ª–æ–∫–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</i>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

    @router.callback_query(F.data.startswith("buy:"))
    async def buy_tariff(cb: types.CallbackQuery):
        t_id = int(cb.data.split(":", 1)[1])
        user = await users.upsert(cb.from_user.username, cb.from_user.id)
        
        # Convert RUB price to USDT (simple division by rate)
        price_row = await db.fetchrow("select price from tariffs where id=$1", t_id)
        price_rub = float(price_row["price"]) if price_row else 0.0
        price_rub_marked = float(apply_markup(price_rub))
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await db.fetchrow("select bonus_balance from users where id=?", user["id"])
        bonus_balance = user_info['bonus_balance'] if user_info else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_promo = await db.fetchrow(
            "select * from user_active_promocodes where user_id=?",
            user["id"]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –±–æ–Ω—É—Å–æ–≤
        kb_promo = InlineKeyboardBuilder()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        if active_promo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
            if active_promo['min_amount'] > 0 and price_rub_marked < active_promo['min_amount']:
                kb_promo.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=f"pay:{t_id}:0")
                kb_promo.button(text="üéÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"promo:{t_id}")
                if bonus_balance > 0:
                    kb_promo.button(text=f"üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã ({bonus_balance} RUB)", callback_data=f"bonus:{t_id}")
                
                await cb.message.edit_text(
                    f"üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b> üõí\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n\n"
                    f"üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{active_promo['promo_code']}</code>\n"
                    f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {active_promo['discount_percent']}%\n"
                    f"üìä <b>–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {active_promo['min_amount']} RUB\n\n"
                    f"‚ùå <i>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</i>",
                    reply_markup=kb_promo.as_markup(),
                    parse_mode="HTML"
                )
                return
            else:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                discount_amount = int(price_rub_marked * active_promo['discount_percent'] / 100)
                final_price = price_rub_marked - discount_amount
                
                kb_promo.button(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π ({final_price} RUB)", callback_data=f"pay_promo:{t_id}:{active_promo['promo_code']}")
                kb_promo.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=f"pay:{t_id}:0")
                kb_promo.button(text="üéÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"promo:{t_id}")
                if bonus_balance > 0:
                    kb_promo.button(text=f"üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã ({bonus_balance} RUB)", callback_data=f"bonus:{t_id}")
                
                await cb.message.edit_text(
                    f"üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b> üõí\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n\n"
                    f"üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{active_promo['promo_code']}</code>\n"
                    f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {active_promo['discount_percent']}% (-{discount_amount} RUB)\n"
                    f"üí≥ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{final_price} RUB</code>\n\n"
                    f"‚úÖ <i>–ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>",
                    reply_markup=kb_promo.as_markup(),
                    parse_mode="HTML"
                )
                return
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            kb_promo.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=f"pay:{t_id}:0")
            kb_promo.button(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"promo:{t_id}")
            if bonus_balance > 0:
                kb_promo.button(text=f"üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã ({bonus_balance} RUB)", callback_data=f"bonus:{t_id}")
            kb_promo.adjust(1)
            
            await cb.message.edit_text(
                f"üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b> üõí\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n\n"
                "üéÅ <i>–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?</i>",
                reply_markup=kb_promo.as_markup(),
                parse_mode="HTML"
            )
    
    @router.callback_query(F.data.startswith("promo:"))
    async def enter_promocode(cb: types.CallbackQuery):
        t_id = int(cb.data.split(":", 1)[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await cb.message.edit_text(
            f"üéÅ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b> üéÅ\n\n"
            f"üìù <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>\n\n"
            f"üí° <i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞</i>",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await cb.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    
    @router.callback_query(F.data.startswith("bonus:"))
    async def use_bonus(cb: types.CallbackQuery):
        t_id = int(cb.data.split(":", 1)[1])
        user = await users.upsert(cb.from_user.username, cb.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
        user_info = await db.fetchrow("select bonus_balance from users where id=?", user["id"])
        bonus_balance = user_info['bonus_balance'] if user_info else 0
        
        if bonus_balance <= 0:
            await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞
        price_row = await db.fetchrow("select price from tariffs where id=$1", t_id)
        price_rub = float(price_row["price"]) if price_row else 0.0
        price_rub_marked = float(apply_markup(price_rub))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        bonus_to_use = min(bonus_balance, price_rub_marked)
        final_price = max(0, price_rub_marked - bonus_to_use)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤
        invoice = await cryptobot.create_invoice(
            asset="USDT", 
            amount=max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1, 
            description=f"Order for tariff #{t_id} (bonus used)", 
            payload={"tariffId": t_id, "userId": user["id"]}
        )
        
        order = await orders.create(
            user_id=user["id"], 
            tariff_id=t_id, 
            invoice_id=invoice["invoice_id"]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        await db.execute(
            "update orders set discount_amount=?, final_price=? where id=?",
            int(bonus_to_use), int(final_price), order["id"]
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        await db.execute(
            "update users set bonus_balance=bonus_balance-? where id=?",
            bonus_to_use, user["id"]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø–ª–∞—Ç—ã
        kb_pay = InlineKeyboardBuilder()
        kb_pay.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice['pay_url'])
        kb_pay.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{order['id']}")
        kb_pay.adjust(1, 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üéâ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤!</b> üéâ\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
            f"üí∞ <b>–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n"
            f"üéÅ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> <code>{int(bonus_to_use)} RUB</code>\n"
            f"üí≥ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{int(final_price)} RUB</code>\n"
            f"üîó <b>–°—á–µ—Ç:</b> <code>{invoice['invoice_id']}</code>\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>~ {max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1} USDT</code>\n\n"
            "üí≥ <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ</i>\n"
            "‚úÖ <i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"–Ø –æ–ø–ª–∞—Ç–∏–ª\" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
        )
        
        await cb.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=kb_pay.as_markup(),
            link_preview_options=LinkPreviewOptions(is_disabled=True),
        )
    
    @router.callback_query(F.data.startswith("pay_promo:"))
    async def process_payment_with_promo(cb: types.CallbackQuery):
        parts = cb.data.split(":")
        t_id = int(parts[1])
        promo_code = parts[2]
        
        user = await users.upsert(cb.from_user.username, cb.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_promo = await db.fetchrow(
            "select * from user_active_promocodes where user_id=? and promo_code=?",
            user["id"], promo_code
        )
        
        if not active_promo:
            await cb.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            return
        
        # Convert RUB price to USDT
        price_row = await db.fetchrow("select price from tariffs where id=$1", t_id)
        price_rub = float(price_row["price"]) if price_row else 0.0
        price_rub_marked = float(apply_markup(price_rub))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        discount_amount = int(price_rub_marked * active_promo['discount_percent'] / 100)
        final_price = price_rub_marked - discount_amount
        
        # Prefer live rate from CryptoBot; fallback to env rate if provided
        if cryptobot:
            try:
                amount_usdt_exact = await cryptobot.rub_to_usdt(final_price)
                amount_usdt = max(0.01, round(amount_usdt_exact, 2))
            except Exception:
                amount_usdt = max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1
        else:
            amount_usdt = max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        invoice = await cryptobot.create_invoice(
            asset="USDT", 
            amount=amount_usdt, 
            description=f"Order for tariff #{t_id} with promo {promo_code}", 
            payload={"tariffId": t_id, "userId": user["id"]}
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        order = await orders.create(
            user_id=user["id"], 
            tariff_id=t_id, 
            invoice_id=invoice["invoice_id"]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        await db.execute(
            "update orders set promo_code=?, discount_amount=?, final_price=? where id=?",
            promo_code, discount_amount, final_price, order["id"]
        )
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
        await db.execute(
            "delete from user_active_promocodes where user_id=? and promo_code=?",
            user["id"], promo_code
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_info = await db.fetchrow("select id from promocodes where code=?", promo_code)
        if promo_info:
            await db.execute("update promocodes set used_count=used_count+1 where id=?", promo_info["id"])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø–ª–∞—Ç—ã
        kb_pay = InlineKeyboardBuilder()
        kb_pay.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice['pay_url'])
        kb_pay.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{order['id']}")
        kb_pay.adjust(1, 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üéâ <b>–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b> üéâ\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
            f"üí∞ <b>–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n"
            f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo_code}</code>\n"
            f"üí∏ <b>–°–∫–∏–¥–∫–∞:</b> <code>{discount_amount} RUB</code>\n"
            f"üí≥ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{int(final_price)} RUB</code>\n"
            f"üíé <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{amount_usdt} USDT</code>\n\n"
            "üîó <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>"
        )
        
        await cb.message.edit_text(
            message_text,
            reply_markup=kb_pay.as_markup(),
            parse_mode="HTML"
        )
    
    @router.callback_query(F.data.startswith("pay:"))
    async def process_payment(cb: types.CallbackQuery):
        parts = cb.data.split(":")
        t_id = int(parts[1])
        promo_id = int(parts[2]) if len(parts) > 2 else 0
        
        user = await users.upsert(cb.from_user.username, cb.from_user.id)
        
        # Convert RUB price to USDT
        price_row = await db.fetchrow("select price from tariffs where id=$1", t_id)
        price_rub = float(price_row["price"]) if price_row else 0.0
        price_rub_marked = float(apply_markup(price_rub))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        discount_amount = 0
        final_price = price_rub_marked
        promo_code = None
        
        if promo_id > 0:
            promo = await db.fetchrow("select * from promocodes where id=? and is_active=1", promo_id)
            if promo and promo['used_count'] < promo['max_uses']:
                if price_rub_marked >= promo['min_amount']:
                    discount_amount = int(price_rub_marked * promo['discount_percent'] / 100)
                    final_price = price_rub_marked - discount_amount
                    promo_code = promo['code']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                    await db.execute("update promocodes set used_count=used_count+1 where id=?", promo_id)
        
        # Prefer live rate from CryptoBot; fallback to env rate if provided
        if cryptobot:
            try:
                amount_usdt_exact = await cryptobot.rub_to_usdt(final_price)
                amount_usdt = max(0.01, round(amount_usdt_exact, 2))
            except Exception:
                amount_usdt = max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1
        else:
            amount_usdt = max(0.01, round((final_price / rub_usdt_rate), 2)) if rub_usdt_rate else 1
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "user_id": user["id"],
            "tariff_id": t_id,
            "promo_code": promo_code,
            "discount_amount": discount_amount,
            "original_price": price_rub_marked,
            "final_price": final_price
        }
        
        invoice = await cryptobot.create_invoice(
            asset="USDT", 
            amount=amount_usdt, 
            description=f"Order for tariff #{t_id}", 
            payload={"tariffId": t_id, "userId": user["id"]}
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        order = await orders.create(
            user_id=user["id"], 
            tariff_id=t_id, 
            invoice_id=invoice["invoice_id"]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if promo_code or discount_amount > 0:
            update_fields = []
            update_values = []
            if promo_code:
                update_fields.append("promo_code=?")
                update_values.append(promo_code)
            if discount_amount > 0:
                update_fields.append("discount_amount=?")
                update_values.append(discount_amount)
            
            if update_fields:
                update_values.append(order["id"])
                await db.execute(f"update orders set {', '.join(update_fields)} where id=?", *update_values)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø–ª–∞—Ç—ã
        kb_pay = InlineKeyboardBuilder()
        kb_pay.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice['pay_url'])
        kb_pay.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{order['id']}")
        kb_pay.adjust(1, 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üéâ <b>–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b> üéâ\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> <code>#{t_id}</code>\n"
            f"üí∞ <b>–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞:</b> <code>{int(price_rub_marked)} RUB</code>\n"
        )
        
        if discount_amount > 0:
            message_text += (
                f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo_code}</code>\n"
                f"üí∏ <b>–°–∫–∏–¥–∫–∞:</b> <code>{discount_amount} RUB</code>\n"
                f"üí≥ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{int(final_price)} RUB</code>\n"
            )
        
        message_text += (
            f"üîó <b>–°—á–µ—Ç:</b> <code>{invoice['invoice_id']}</code>\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>~ {amount_usdt} USDT</code>\n\n"
            "üí≥ <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ</i>\n"
            "‚úÖ <i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"–Ø –æ–ø–ª–∞—Ç–∏–ª\" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
        )
        
        await cb.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=kb_pay.as_markup(),
            link_preview_options=LinkPreviewOptions(is_disabled=True),
        )

    @router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    async def my_orders(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        os = await orders.by_user(user["id"])
        if not os:
            return await msg.answer(
                "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                "üõí <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!</i>",
                parse_mode="HTML"
            )
        
        lines = []
        for o in os:
            price_marked = apply_markup(float(o['price']))
            status_emoji = {
                "created": "‚è≥",
                "paid": "‚úÖ", 
                "delivered": "üéâ"
            }.get(o['status'], "‚ùì")
            
            lines.append(
                f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{o['id']}</b>\n"
                f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {o['location']}\n"
                f"‚öôÔ∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> {o['specs']}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_marked} RUB\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {o['status']}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
        
        await msg.answer(
            f"üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> üì¶\n\n" + "\n\n".join(lines),
            parse_mode="HTML"
        )

    @router.callback_query(F.data.startswith("paid:"))
    async def user_paid(cb: types.CallbackQuery):
        order_id = int(cb.data.split(":", 1)[1])
        user = await users.upsert(cb.from_user.username, cb.from_user.id)
        
        # Get order details
        order_row = await db.fetchrow(
            "select o.*, t.location, t.specs, t.price from orders o left join tariffs t on t.id=o.tariff_id where o.id=?",
            order_id
        )
        
        if not order_row:
            return await cb.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if order_row["user_id"] != user["id"]:
            return await cb.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑")
        
        # Send log to channel with admin buttons
        if log_channel_id:
            price_marked = apply_markup(float(order_row['price']))
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"logpaid:{order_id}")
            kb.button(text="‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"logunpaid:{order_id}")
            kb.adjust(2)
            text = (
                f"üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{cb.from_user.username or cb.from_user.id}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: —Ç–∞—Ä–∏—Ñ #{order_row['tariff_id']}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {order_row['location']}\n"
                f"‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {order_row['specs']}\n"
                f"üí∞ –¶–µ–Ω–∞: {int(price_marked)} RUB\n"
                f"üßæ invoice_id: {order_row['invoice_id']}\n"
                f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª"
            )
            try:
                await cb.bot.send_message(log_channel_id, text, reply_markup=kb.as_markup())
                await cb.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            except Exception:
                await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")
        else:
            await cb.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")

    @router.message(F.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
    async def promocodes(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        active_promos = await db.fetch(
            "select code, discount_percent, min_amount, max_uses, used_count from promocodes where is_active=true and (max_uses=0 or used_count < max_uses)"
        )
        
        if not active_promos:
            await msg.answer(
                "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b> üéÅ\n\n"
                "üòî <i>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</i>\n\n"
                "üì¢ <i>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!</i>",
                parse_mode="HTML"
            )
            return
        
        text = "üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</b> üéÅ\n\n"
        for promo in active_promos:
            remaining_uses = "‚àû" if promo['max_uses'] == 0 else promo['max_uses'] - promo['used_count']
            text += (
                f"üíé <b>–ö–æ–¥:</b> <code>{promo['code']}</code>\n"
                f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {promo['discount_percent']}%\n"
                f"üìä <b>–ú–∏–Ω. —Å—É–º–º–∞:</b> {promo['min_amount']} RUB\n"
                f"üéØ <b>–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {remaining_uses}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            )
        
        text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</i>"
        
        await msg.answer(text, parse_mode="HTML")
    
    @router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    async def referral_system(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_info = await msg.bot.get_me()
        ref_link = f"https://t.me/{bot_info.username}?start=ref{user['id']}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        ref_users = await db.fetch("select username, telegram_id, created_at from users where referrer_id=? order by created_at desc", user["id"])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        ref_rewards = await db.fetchrow("select sum(reward_amount) as total from referral_rewards where referrer_id=?", user["id"])
        total_rewards = ref_rewards['total'] if ref_rewards and ref_rewards['total'] else 0
        
        text = (
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b> üë•\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{ref_link}</code>\n\n"
            f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{total_rewards}</code> RUB\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>\n"
        )
        
        if ref_users:
            for i, ref_user in enumerate(ref_users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                username = f"@{ref_user['username']}" if ref_user['username'] else f"ID: {ref_user['telegram_id']}"
                date = ref_user['created_at'].strftime("%d.%m.%Y") if ref_user['created_at'] else "N/A"
                text += f"{i}. {username} - {date}\n"
            
            if len(ref_users) > 10:
                text += f"... –∏ –µ—â–µ {len(ref_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        else:
            text += "üòî <i>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ</i>\n"
        
        text += "\nüí° <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑!</i>"
        
        await msg.answer(text, parse_mode="HTML")
    
    @router.message(F.text == "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    async def support(msg: types.Message):
        await msg.answer(
            f"üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> üÜò\n\n"
            f"üìû <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b> {support_contact}\n\n"
            "üí¨ <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å</i>\n"
            "‚è∞ <i>–û—Ç–≤–µ—Ç–∏–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏</i>",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    @router.message(lambda msg: msg.text and len(msg.text) >= 3 and msg.text.isupper())
    async def handle_promocode(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        promo = await db.fetchrow(
            "select * from promocodes where code=? and is_active=1 and (max_uses=0 or used_count < max_uses)",
            msg.text
        )
        
        if not promo:
            await msg.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "üòî <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥</i>\n\n"
                "üéÅ <i>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–æ–º–æ–∫–æ–¥—ã\"</i>",
                parse_mode="HTML"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await db.execute(
            "delete from user_active_promocodes where user_id=?",
            user["id"]
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            "insert into user_active_promocodes (user_id, promo_code, discount_percent, min_amount) values (?, ?, ?, ?)",
            user["id"], promo['code'], promo['discount_percent'], promo['min_amount']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if promo['min_amount'] > 0:
            await msg.answer(
                f"üí° <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                f"üéÅ <b>–ö–æ–¥:</b> <code>{promo['code']}</code>\n"
                f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {promo['discount_percent']}%\n"
                f"üìä <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {promo['min_amount']} RUB\n\n"
                f"üõí <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</i>",
                parse_mode="HTML"
            )
        else:
            await msg.answer(
                f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                f"üéÅ <b>–ö–æ–¥:</b> <code>{promo['code']}</code>\n"
                f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {promo['discount_percent']}%\n\n"
                f"üõí <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</i>",
                parse_mode="HTML"
            )

    @router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
    async def clear_promocode(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            "delete from user_active_promocodes where user_id=?",
            user["id"]
        )
        
        await msg.answer(
            "üóëÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –æ—á–∏—â–µ–Ω!</b>\n\n"
            "‚úÖ <i>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i>\n\n"
            "üõí <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É –±–µ–∑ —Å–∫–∏–¥–∫–∏</i>",
            parse_mode="HTML"
        )

    @router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile(msg: types.Message):
        user = await users.upsert(msg.from_user.username, msg.from_user.id)
        os = await orders.by_user(user["id"])
        total = len(os)
        paid = sum(1 for o in os if o.get("status") == "paid")
        delivered = sum(1 for o in os if o.get("status") == "delivered")
        created = total - paid - delivered
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        ref_count = await db.fetchrow("select count(*) as c from users where referrer_id=?", user["id"])
        ref_count = ref_count['c'] if ref_count else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
        bonus_balance = await db.fetchrow("select bonus_balance from users where id=?", user["id"])
        bonus_balance = bonus_balance['bonus_balance'] if bonus_balance else 0
        
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> üë§\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üÜî <b>ID:</b> <code>{msg.from_user.id}</code>\n"
            f"üë§ <b>Username:</b> @{msg.from_user.username or '‚Äî'}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:</b>\n"
            f"‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã:</b> <code>{created}</code>\n"
            f"‚úÖ <b>–û–ø–ª–∞—á–µ–Ω—ã:</b> <code>{paid}</code>\n"
            f"üéâ <b>–í—ã–¥–∞–Ω—ã:</b> <code>{delivered}</code>\n"
            f"üìà <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> <code>{total}</code>\n\n"
            f"üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{bonus_balance}</code> RUB\n"
            f"üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> <code>{ref_count}</code>"
        )
        await msg.answer(text, parse_mode="HTML")

    # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑" –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –≤—ã.

    # Admin-only seed command to fill tariffs quickly
    @router.message(F.text == "/seed")
    async def seed_tariffs(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        # Combined preset across all supported locations
        preset = [
            ("–†–æ—Å—Å–∏—è", "3 Gb RAM / 2 Core CPU / SSD 40 Gb", 533),
            ("–†–æ—Å—Å–∏—è", "4 Gb RAM / 3 Core CPU / SSD 40 Gb", 598),
            ("–†–æ—Å—Å–∏—è", "4 Gb RAM / 2 Core CPU / SSD 40 Gb", 637),
            ("–†–æ—Å—Å–∏—è", "6 Gb RAM / 4 Core CPU / SSD 40 Gb", 650),
            ("–†–æ—Å—Å–∏—è", "8 Gb RAM / 4 Core CPU / SSD 70 Gb", 1014),
            ("–†–æ—Å—Å–∏—è", "16 Gb RAM / 8 Core CPU / SSD 120 Gb", 2054),
            ("–†–æ—Å—Å–∏—è", "24 Gb RAM / 10 Core CPU / SSD 120 Gb", 2405),
            ("–†–æ—Å—Å–∏—è", "32 Gb RAM / 10 Core CPU / SSD 250 Gb", 3510),
            ("–†–æ—Å—Å–∏—è", "64 Gb RAM / 20 Core CPU / SSD 500 Gb", 6354),
            ("–†–æ—Å—Å–∏—è", "128 Gb RAM / 32 Core CPU / SSD 2000 Gb", 10244),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "4 Gb RAM / 2 Core CPU / SSD 40 Gb", 624),
            ("–°–®–ê", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–°–®–ê", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–°–®–ê", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–°–®–ê", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–°–®–ê", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–°–®–ê", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã —Å —Ç–µ–º–∏ –∂–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏, —á—Ç–æ –∏ —É –§–∏–Ω–ª—è–Ω–¥–∏–∏
            ("–§—Ä–∞–Ω—Ü–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–§—Ä–∞–Ω—Ü–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–§—Ä–∞–Ω—Ü–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–§—Ä–∞–Ω—Ü–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–§—Ä–∞–Ω—Ü–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–§—Ä–∞–Ω—Ü–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
            ("–ò—Å–ø–∞–Ω–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–ò—Å–ø–∞–Ω–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–ò—Å–ø–∞–Ω–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–ò—Å–ø–∞–Ω–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–ò—Å–ø–∞–Ω–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–ò—Å–ø–∞–Ω–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
        ]
        added = 0
        updated_count = 0
        for loc, specs, price in preset:
            # Try to find existing by location + specs, update price; else insert
            existing = await db.fetchrow(
                "select id, price from tariffs where location=$1 and specs=$2 limit 1",
                loc,
                specs,
            )
        if existing:
            if float(existing["price"]) != float(price):
                await db.execute(
                    "update tariffs set price=$1 where id=$2",
                    float(price),
                    existing["id"],
                )
                updated_count += 1
        else:
            await tariffs.create(loc, specs, float(price))
            added += 1
        await msg.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {updated_count}")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    @router.message(F.text == "/init_db")
    async def init_database(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            await db.execute("""
                create table if not exists promocodes (
                    id integer primary key autoincrement,
                    code text unique not null,
                    discount_percent integer not null,
                    min_amount integer default 0,
                    max_uses integer default 0,
                    used_count integer default 0,
                    is_active integer default 1,
                    created_at timestamp default current_timestamp
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
            await db.execute("""
                create table if not exists referral_rewards (
                    id integer primary key autoincrement,
                    referrer_id integer,
                    referred_user_id integer,
                    order_id integer,
                    reward_amount integer not null,
                    created_at timestamp default current_timestamp,
                    foreign key (referrer_id) references users(id),
                    foreign key (referred_user_id) references users(id),
                    foreign key (order_id) references orders(id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await db.execute("""
                create table if not exists settings (
                    key text primary key,
                    value text not null,
                    updated_at timestamp default current_timestamp
                )
            """)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
            try:
                await db.execute("alter table users add column referrer_id integer")
            except:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            try:
                await db.execute("alter table users add column bonus_balance integer default 0")
            except:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É orders
            try:
                await db.execute("alter table orders add column promo_code text")
            except:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            try:
                await db.execute("alter table orders add column discount_amount integer default 0")
            except:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            try:
                await db.execute("alter table orders add column final_price integer")
            except:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
            try:
                await db.execute("insert into settings (key, value) values (?, ?)", ("referral_reward", "100"))
            except:
                pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute("""
                create table if not exists user_active_promocodes (
                    id integer primary key autoincrement,
                    user_id integer references users(id) on delete cascade,
                    promo_code text not null,
                    discount_percent integer not null,
                    min_amount integer default 0,
                    created_at timestamp default current_timestamp
                )
            """)
            
            await msg.answer(
                "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                "üìä <b>–°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:</b>\n"
                "‚Ä¢ promocodes - –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "‚Ä¢ referral_rewards - –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
                "‚Ä¢ settings - –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                "‚Ä¢ user_active_promocodes - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "üîß <b>–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è:</b>\n"
                "‚Ä¢ referrer_id - ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\n"
                "‚Ä¢ bonus_balance - –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n"
                "‚Ä¢ promo_code - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "‚Ä¢ discount_amount - —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏\n"
                "‚Ä¢ final_price - –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞\n\n"
                "üí° <b>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                "‚Ä¢ /add_promo - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "‚Ä¢ /set_ref_reward - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
                "‚Ä¢ /ref_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                parse_mode="HTML"
            )
            
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    @router.message(F.text.startswith("/add_promo"))
    async def add_promocode(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        parts = msg.text.split()
        if len(parts) < 5:
            return await msg.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_promo <–∫–æ–¥> <—Å–∫–∏–¥–∫–∞_%> <–º–∏–Ω_—Å—É–º–º–∞> <–º–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π>\n"
                "–ü—Ä–∏–º–µ—Ä: /add_promo WELCOME 10 1000 100"
            )
        
        try:
            code = parts[1].upper()
            discount = int(parts[2])
            min_amount = int(parts[3])
            max_uses = int(parts[4])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
            existing = await db.fetchrow("select 1 from promocodes where code=?", code)
            if existing:
                return await msg.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            await db.execute(
                "insert into promocodes (code, discount_percent, min_amount, max_uses, is_active) values (?, ?, ?, ?, 1)",
                code, discount, min_amount, max_uses
            )
            
            await msg.answer(
                f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üéÅ <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {discount}%\n"
                f"üìä <b>–ú–∏–Ω. —Å—É–º–º–∞:</b> {min_amount} RUB\n"
                f"üéØ <b>–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {max_uses}",
                parse_mode="HTML"
            )
            
        except ValueError:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
    
    @router.message(F.text.startswith("/del_promo"))
    async def delete_promocode(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        parts = msg.text.split()
        if len(parts) < 2:
            return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_promo <–∫–æ–¥>")
        
        code = parts[1].upper()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        result = await db.execute("delete from promocodes where code=?", code)
        
        if result:
            await msg.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª–µ–Ω!")
        else:
            await msg.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    @router.message(F.text.startswith("/list_promos"))
    async def list_promocodes(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        promos = await db.fetch("select * from promocodes order by created_at desc")
        
        if not promos:
            await msg.answer("üìù –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.")
            return
        
        text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n"
        for promo in promos:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            remaining = "‚àû" if promo['max_uses'] == 0 else promo['max_uses'] - promo['used_count']
            text += (
                f"üéÅ <b>{promo['code']}</b> - {status}\n"
                f"üí∞ –°–∫–∏–¥–∫–∞: {promo['discount_percent']}%\n"
                f"üìä –ú–∏–Ω. —Å—É–º–º–∞: {promo['min_amount']} RUB\n"
                f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['used_count']}/{promo['max_uses']} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            )
        
        await msg.answer(text, parse_mode="HTML")
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    @router.message(F.text.startswith("/set_ref_reward"))
    async def set_referral_reward(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        parts = msg.text.split()
        if len(parts) < 2:
            return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_ref_reward <—Å—É–º–º–∞_–≤_RUB>")
        
        try:
            reward = int(parts[1])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
            await db.execute("update settings set value=? where key=?", str(reward), "referral_reward")
            
            await msg.answer(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {reward} RUB")
            
        except ValueError:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    
    @router.message(F.text.startswith("/ref_stats"))
    async def referral_stats(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        total_users = await db.fetchrow("select count(*) as c from users")
        users_with_refs = await db.fetchrow("select count(*) as c from users where referrer_id is not null")
        total_rewards = await db.fetchrow("select sum(reward_amount) as total from referral_rewards")
        
        text = (
            "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</b> üë•\n\n"
            f"üë§ <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users['c']}\n"
            f"üîó <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b> {users_with_refs['c']}\n"
            f"üí∞ <b>–í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥:</b> {total_rewards['total'] or 0} RUB\n\n"
        )
        
        # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        top_refs = await db.fetch(
            "select u.username, u.telegram_id, count(r.id) as ref_count, sum(r.reward_amount) as total_reward "
            "from users u left join users r on u.id=r.referrer_id "
            "where u.id in (select distinct referrer_id from users where referrer_id is not null) "
            "group by u.id, u.username, u.telegram_id "
            "order by ref_count desc limit 5"
        )
        
        if top_refs:
            text += "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
            for i, ref in enumerate(top_refs, 1):
                username = f"@{ref['username']}" if ref['username'] else f"ID: {ref['telegram_id']}"
                text += f"{i}. {username} - {ref['ref_count']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, {ref['total_reward'] or 0} RUB\n"
        
        await msg.answer(text, parse_mode="HTML")

    @router.message(F.text.startswith("/seed_usa"))
    async def seed_usa(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        existing_usa = await db.fetchrow("select 1 from tariffs where lower(location) in ('—Å—à–∞','usa') limit 1")
        if existing_usa:
            return await msg.answer("–¢–∞—Ä–∏—Ñ—ã –°–®–ê —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        usa_preset = [
            ("–°–®–ê", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–°–®–ê", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–°–®–ê", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–°–®–ê", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–°–®–ê", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–°–®–ê", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
        ]
        cnt = 0
        for loc, specs, price in usa_preset:
            await tariffs.create(loc, specs, float(price))
            cnt += 1
        await msg.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ –°–®–ê —Ç–∞—Ä–∏—Ñ–æ–≤: {cnt}")

    @router.message(F.text.startswith("/seed_sg"))
    async def seed_singapore(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        exists = await db.fetchrow("select 1 from tariffs where lower(location) like '%—Å–∏–Ω–≥–∞–ø%' or lower(location) like '%singap%' limit 1")
        if exists:
            return await msg.answer("–¢–∞—Ä–∏—Ñ—ã –°–∏–Ω–≥–∞–ø—É—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        sg_preset = [
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
        ]
        cnt = 0
        for loc, specs, price in sg_preset:
            await tariffs.create(loc, specs, float(price))
            cnt += 1
        await msg.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤ –°–∏–Ω–≥–∞–ø—É—Ä–∞: {cnt}")

    @router.message(F.text.startswith("/seed_fin"))
    async def seed_finland(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        exists = await db.fetchrow("select 1 from tariffs where lower(location) like '%—Ñ–∏–Ω–ª%' or lower(location) like '%finland%' limit 1")
        if exists:
            return await msg.answer("–¢–∞—Ä–∏—Ñ—ã –§–∏–Ω–ª—è–Ω–¥–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        fin_preset = [
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "1vCPU / 768 MB RAM / SSD 5 Gb", 259),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "1vCPU / 1024 MB RAM / SSD 10 Gb", 429),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "2vCPU / 2048 MB RAM / SSD 20 Gb", 759),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "4vCPU / 3072 MB RAM / SSD 50 Gb", 1259),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "6vCPU / 6144 MB RAM / SSD 100 Gb", 1759),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", "8vCPU / 8192 MB RAM / SSD 200 Gb", 2399),
        ]
        cnt = 0
        for loc, specs, price in fin_preset:
            await tariffs.create(loc, specs, float(price))
            cnt += 1
        await msg.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤ –§–∏–Ω–ª—è–Ω–¥–∏–∏: {cnt}")

    @router.message(F.text.startswith("/check"))
    async def check_invoice(msg: types.Message):
        parts = msg.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check <invoice_id>")
        invoice_id = int(parts[1])
        if not cryptobot:
            return await msg.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: CRYPTOBOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        inv = await cryptobot.get_invoice(invoice_id)
        if not inv:
            return await msg.answer("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if inv.get("status") == "paid":
            order = await orders.by_invoice_id(invoice_id)
            if order and order.get("status") != "paid":
                await orders.set_status(order["id"], "paid")
            await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ñ–¥–∏—Ç–µ –≤—ã–¥–∞—á–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            for admin_id in admin_ids:
                try:
                    await msg.bot.send_message(admin_id, f"‚úÖ –û–ø–ª–∞—á–µ–Ω —Å—á–µ—Ç {invoice_id}")
                except Exception:
                    pass
        else:
            await msg.answer(f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞: {inv.get('status')}")

    # Admin
    def is_admin(user_id: int) -> bool:
        return user_id in admin_ids

    @router.message(F.text.startswith("/orders_paid"))
    async def orders_paid(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        rows = await db.fetch(
            "select o.id, t.location, t.specs, t.price from orders o left join tariffs t on t.id=o.tariff_id where o.status='paid' order by o.id desc limit 20"
        )
        if not rows:
            return await msg.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        await msg.answer("\n".join(
            f"#{r['id']} ‚Ä¢ {r['location']} ‚Ä¢ {r['specs']} ‚Ä¢ {apply_markup(float(r['price']))} RUB" for r in rows
        ))

    @router.message(F.text.startswith("/set_delivered"))
    async def set_delivered(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        parts = msg.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            return await msg.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: /set_delivered <id>")
        order_id = int(parts[1])
        updated = await orders.set_status(order_id, "delivered")
        if not updated:
            return await msg.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await msg.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ \"delivered\".")

    @router.message(F.text.startswith("/set_paid"))
    async def set_paid(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        parts = msg.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            return await msg.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: /set_paid <id>")
        order_id = int(parts[1])
        updated = await orders.set_status(order_id, "paid")
        if not updated:
            return await msg.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await msg.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ \"paid\".")

    # Admin panel
    @router.message(F.text.startswith("/admin"))
    async def admin_panel(msg: types.Message):
        if not is_admin(msg.from_user.id):
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="admin:paid")
        kb.button(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin:all")
        kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
        kb.adjust(2)
        await msg.answer(
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> ‚öôÔ∏è\n\n"
            "üîß <i>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</i>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

    @router.callback_query(F.data == "admin:paid")
    async def admin_paid(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        rows = await db.fetch(
            "select o.id, t.location, t.specs, t.price from orders o left join tariffs t on t.id=o.tariff_id where o.status='paid' order by o.id desc limit 20"
        )
        if not rows:
            return await cb.message.edit_text("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        kb = InlineKeyboardBuilder()
        for r in rows:
            kb.button(text=f"–í—ã–¥–∞—Ç—å #{r['id']}", callback_data=f"setdel:{r['id']}")
        kb.adjust(2)
        await cb.message.edit_text(
            "\n".join(
                f"#{r['id']} ‚Ä¢ {r['location']} ‚Ä¢ {r['specs']} ‚Ä¢ {apply_markup(float(r['price']))} RUB" for r in rows
            ),
            reply_markup=kb.as_markup(),
        )

    @router.callback_query(F.data == "admin:all")
    async def admin_all(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        rows = await db.fetch(
            "select o.id, o.status, t.location, t.specs, t.price from orders o left join tariffs t on t.id=o.tariff_id order by o.id desc limit 30"
        )
        if not rows:
            return await cb.message.edit_text("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        kb = InlineKeyboardBuilder()
        for r in rows:
            if r["status"] == "created":
                kb.button(text=f"–û–ø–ª–∞—á–µ–Ω #{r['id']}", callback_data=f"setpaid:{r['id']}")
            if r["status"] == "paid":
                kb.button(text=f"–í—ã–¥–∞—Ç—å #{r['id']}", callback_data=f"setdel:{r['id']}")
        kb.adjust(2)
        await cb.message.edit_text(
            "\n".join(
                f"#{r['id']} ‚Ä¢ {r['status']} ‚Ä¢ {r['location']} ‚Ä¢ {r['specs']} ‚Ä¢ {apply_markup(float(r['price']))} RUB" for r in rows
            ),
            reply_markup=kb.as_markup(),
        )

    @router.callback_query(F.data == "admin:stats")
    async def admin_stats(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        total = await db.fetchrow("select count(*) as c from orders")
        paid = await db.fetchrow("select count(*) as c from orders where status='paid'")
        delivered = await db.fetchrow("select count(*) as c from orders where status='delivered'")
        users_count = await db.fetchrow("select count(*) as c from users")
        rows_am = await db.fetch(
            "select t.price from orders o left join tariffs t on t.id=o.tariff_id where o.status in ('paid','delivered')"
        )
        revenue_sum = sum(apply_markup(float(r['price'])) for r in rows_am) if rows_am else 0
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b> üìä\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> <code>{total['c']}</code>\n"
            f"‚úÖ <b>–û–ø–ª–∞—á–µ–Ω–æ:</b> <code>{paid['c']}</code>\n"
            f"üéâ <b>–í—ã–¥–∞–Ω–æ:</b> <code>{delivered['c']}</code>\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{users_count['c']}</code>\n"
            f"üí∞ <b>–í—ã—Ä—É—á–∫–∞ (RUB):</b> <code>{revenue_sum:,}</code>"
        )
        await cb.message.edit_text(text, parse_mode="HTML")

    @router.callback_query(F.data.startswith("setdel:"))
    async def admin_set_delivered_btn(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        order_id = int(cb.data.split(":",1)[1])
        updated = await orders.set_status(order_id, "delivered")
        if updated:
            await cb.answer("–í—ã–¥–∞–Ω–æ")
            await cb.message.edit_text(cb.message.text + f"\n\n‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–¥–∞–Ω.")
            if updated.get("telegram_id"):
                try:
                    await cb.bot.send_message(int(updated["telegram_id"]), f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id}: —Å—Ç–∞—Ç—É—Å <b>–í—ã–¥–∞–Ω</b>.", parse_mode="HTML")
                except Exception:
                    pass
        else:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    @router.callback_query(F.data.startswith("setpaid:"))
    async def admin_set_paid_btn(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        order_id = int(cb.data.split(":",1)[1])
        updated = await orders.set_status(order_id, "paid")
        if updated:
            await cb.answer("–û–ø–ª–∞—á–µ–Ω")
            await cb.message.edit_text(cb.message.text + f"\n\n‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω.")
            if updated.get("telegram_id"):
                try:
                    text = (
                        f"<b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n"
                        f"–°—Ç–∞—Ç—É—Å: <b>–û–ø–ª–∞—á–µ–Ω</b>\n"
                        f"{updated['location']} ‚Ä¢ {updated['specs']} ‚Ä¢ {apply_markup(float(updated['price']))} RUB"
                    )
                    await cb.bot.send_message(int(updated["telegram_id"]), text, parse_mode="HTML")
                except Exception:
                    pass
        else:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    # Callbacks for log channel
    @router.callback_query(F.data.startswith("logpaid:"))
    async def mark_paid(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        order_id = int(cb.data.split(":", 1)[1])
        updated = await orders.set_status(order_id, "paid")
        if updated:
            await cb.message.edit_text(cb.message.text + "\n\n‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: –æ–ø–ª–∞—á–µ–Ω.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∑–∞–∫–∞–∑–µ
                order_info = await db.fetchrow(
                    "select o.user_id, o.final_price, u.referrer_id, u.telegram_id from orders o "
                    "left join users u on o.user_id=u.id where o.id=?", order_id
                )
                
                if order_info and order_info['referrer_id']:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                    ref_reward_setting = await db.fetchrow("select value from settings where key=?", "referral_reward")
                    ref_reward_amount = int(ref_reward_setting['value']) if ref_reward_setting else 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 RUB
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    await db.execute(
                        "insert into referral_rewards (referrer_id, referred_user_id, order_id, reward_amount) values (?, ?, ?, ?)",
                        order_info['referrer_id'], order_info['user_id'], order_id, ref_reward_amount
                    )
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    await db.execute(
                        "update users set bonus_balance=bonus_balance+? where id=?",
                        ref_reward_amount, order_info['referrer_id']
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                    ref_user = await db.fetchrow("select telegram_id, username from users where id=?", order_info['referrer_id'])
                    if ref_user:
                        try:
                            await cb.bot.send_message(
                                ref_user['telegram_id'],
                                f"üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{order_info.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} "
                                f"–æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ #{order_id}\n"
                                f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: <code>{ref_reward_amount} RUB</code>\n\n"
                                f"üí° –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤!",
                                parse_mode="HTML"
                            )
                        except Exception:
                            pass
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
            
            # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full = updated
            if full and full.get("telegram_id"):
                try:
                    text = (
                        f"<b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n"
                        f"–°—Ç–∞—Ç—É—Å: <b>–û–ø–ª–∞—á–µ–Ω</b>\n"
                        f"{full['location']} ‚Ä¢ {full['specs']} ‚Ä¢ {apply_markup(float(full['price']))} RUB\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CryptoBot —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã –≤ {support_contact} –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞."
                    )
                    await cb.bot.send_message(int(full["telegram_id"]), text, parse_mode="HTML")
                except Exception:
                    pass
            await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω")
        else:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    @router.callback_query(F.data.startswith("logunpaid:"))
    async def mark_unpaid(cb: types.CallbackQuery):
        if not is_admin(cb.from_user.id):
            return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        order_id = int(cb.data.split(":", 1)[1])
        updated = await orders.set_status(order_id, "created")
        if updated:
            await cb.message.edit_text(cb.message.text + "\n\n‚ùå –û—Ç–º–µ—á–µ–Ω–æ: –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            full = updated
            if full and full.get("telegram_id"):
                try:
                    text = (
                        f"<b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n"
                        f"–°—Ç–∞—Ç—É—Å: <b>–ù–µ –æ–ø–ª–∞—á–µ–Ω</b>\n"
                        f"{full['location']} ‚Ä¢ {full['specs']} ‚Ä¢ {apply_markup(float(full['price']))} RUB\n\n"
                        f"–ï—Å–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ {support_contact}."
                    )
                    await cb.bot.send_message(int(full["telegram_id"]), text, parse_mode="HTML")
                except Exception:
                    pass
            await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
        else:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")


